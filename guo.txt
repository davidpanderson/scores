12/26/22

publishers
    parse {{P}} templates
    publisher table
    web

performers
    show some data (inconsistent)
        audio_file_set.performers, performer_categories

    DB structure:
        use "person" table for performers as well as composers
            flags for is_composer, is_performer
        new tables:
            ensemble
            performer_role
                link to person
                role (text: conductor, instrument)
                they may have played this role in many recordings
            audio_performer:
                link to audio file set
                link to performer role
    show web

arrangements
    data
        score_file_set.hier1, hier3

    DB structure
        new table:
        arrangement_target
            describes a combination of instruments
        link to from score_file_set

    show web

----------------

general thoughts

editing interfaces
    wiki-based: edit pages, using existing templates
    form-based: fill in fields in a web form

    existing volunteers are trained for wiki-based: need to keep it?
    new volunteers: could use form-based

Dealing with template calls (transclusions)
    There are too many to replace with DB stuff
    PHP code to expand template calls?
        mediawiki (PHP) already this - use their code?
        roll our own (simplified):
        need the DB of template definitions (mediawiki DB)

Edward:

query: any combination of factors
    show only scores, or only files

publisher page:
    show composers

(like category walker)

keep user-supplied names separately?
    e.g. editors

admin-vetted person names
---------------
4 Jan 2023

first pass at expanding MW text: templates, links
    store template definitions in .ser file
    handle argument substitution, #if constructs

parsing of performers and performer_categories in audio files
    parse most {{GardnerPerf cases
    tighten up ad-hoc parsing

parsing Incipit data
    handle </Score>, <score raw=1>

web:
    eliminate composer/performer distincation
    person search: sex, period, nationality, type
    ensemble search
    show details on person, work, ensemble pages

rename "composition" to "work", "style" to "period"

make .ser files for small DB tables (period, nationality, copyright)

DB: use utf8mb4 and utf8mb4_unicode_ci
    required shortening some fields, 767-char index limit in inoodb

Moved to latest PHP (8.1.2) and MySQL (8.0.31)
    required moving from BOINC server to cloud VM
    consequences:
        work title collisions (differ only in case or diacritical marks)
            add (2) etc. to make unique
        character encoding errors
            keep going;
            tell mysqli to report errors rather than exceptions
        keyword search now (correctly) ignores diacritics
        DB schema: remove "not null" on text fields
        slower (~1.5 hours to parse and load all data)

keyword search:
    mariadb "natural language mode" didn't work
    need to experiment withMySQL
    could use external text search system


TODO:
move to bitbucket
use multi-value indices
look into MW parsing

notion of instrumentation
    instruments, count

keep track of what fails to parse


genres

work types
    hierarchy

displayed at bottom of page (Categories)

show all music w/ at least 2 violins

https://imslp.org/wiki/MediaWiki:Genres/Work_Types_Definitions

all composers that have works for >2 violins and organ

only show options that would produce results

#: tag definition
*: category definition

how to structure in DB?

--------------------------------
16 Jan 2023

DB changes
    use JSON fields instead of association tables for
        person periods
        person nationalities
        audio file performers
    make multi-value indices on these fields
        (can search on member, contains, overlap)

    new tables for tag info:
        work_type
        language
        instrument
        instrument_combo
            explain structure: list of counts, list of ids
                lets you search for combos with given instruments
            order of instrument matters
            used for both works (native instrumentation)
                and scores (if arrangement)

    new fields in existing tables
        work.instrument_combo_ids
        work.language_ids
        work.work_type_ids
        score_file_set.instrument_combo_ids
    indices for the above

Populating new tables
    files taken from IMSLP
        inst.txt
        worK_types.tags
        work_types_hier.tags
        lang.tags
    new programs (done first)
        populate_inst.php
        populate_lang.php
        populate_work_type.php
    populate_work.php
        for each work
            parse tags: returns list of languages, work types, inst combos
                parse_tags.inc
            create new instrument combo records as needed
        for each score
            parse file_tags
            create instr combos
        set count fields (nworks, nscores) of combo, work type, lang

    instrument combos of arrangements
        most scores that are arrangments don't have tags.
        Instead, hier1 is "Arrangements and Transcriptions"
        and hier3 is something like
        "For violin or flute, 2 horns, and piano (name)"
        select file_tags, hier3 from score_file_set where hier3<>'' limit 100;

        I wrote code that parses such string and converts them
        to instrument combos, i.e. lists of (count, inst id).
        Actually it may return a list of this in the case of "or".

        see parse_combo.inc

        It handles some deviations, like 'piano 4-hands'

        This works for about 95% of cases.
        The others involve instruments that don't exist,
        like "Theatre Orchestra" or "Bandurria".

        populate_work.php uses this when appropriate.

New search features
    instruments
        show instrument combos that include selected instruments
        show works or scores that use each combo
    language search
    work types
        show works of given type (or a descendant)

    Limit all searchs to 50 items per page; Next button

Miscellaneous
    columns for long item lists
    populate.sh
    put space after No., Op. in work titles

issues
    what is hash scheme for image, audio URLs?
        mouse-over audio
        move audio as far front as possible
    project management?
    pay me?
    Rich Kraft
        data scientist, pianist/composer, smart
        wants a job
        expanded role for IMSLP:
        music discovery (esp new music)
        social site: linkedin, music match
        connections with conservatories, concert series
------------------
manual cleanup?
    generate list of problems cases

24 hrs/week $40/hr

issue-tracking: Notion

calls: 2x/week?

visit: summer
================
23 Jan 2023

mouse-over audio
    for each work, pick a recording of the 1st mvt
        use non-synthesized if available
    for each arrangement (score with non-default instrumentation)
        pick a recording with similar instrumentation
        also prefer non-synth
    The above stored in DB; populate_sample.php
    note: I figured out the directory hashing scheme

Work pages
    show scores and recordings as links to details pages

mediawiki text expansion
    indented verbose output
    add expansion of unordered lists, tables
        easiest to do ourselves?

    issues:
        #smwlink:*
        #fte:mclink
------------
Edward:
could handle P in a PHP function

#smwlink: 

FTE templates:
https://imslp.org/wiki/MediaWiki:FTE:mclink

possible goal:
    design a REST API
    for use by apps
    Web interface is react/JS
    nextJS (updated version of react)
    has PDF editor built in

5 programmers, 1 designer

200K-300K app users (tablets)
    app has annotation; replaces forscore
    2-screen folding tablet
    sync across devices
        annotations
    sharing platform
        annotations
web: 2M unique/month
=============
30 Jan 2023

What I did:
1) MW expansion
    added
        #expr: (subtraction)
        {{CURRENTYEAR}}
        padleft:
        <nowiki>
        #switch:
    bug fixes
    pretty much done except:
        #fte: functions
        internal links
        #ifexist:
    show original, expanded

2) search capabilities
    works or arrangements
        (join on score_file_set)
    composer attributes: sex, nationality
        (join on person)
    instr combos
        order by frequency

    speed: fast once DB server has data

3) show arrangements w/ original, new instrumentation

-------------
Music Match demo
    premise:
        lots of performers want to find new music to play
        lots of composers want people to play their music
    High-end music world:
        high-end performers (e.g. The Chronos Quartet)
        commissions works from high-end composers.
        They get played once and forgotten. 
    Want to create mechanisms for non-high-end people
    Like LinkedIn (or Match.com):
        you create a profile, the system steers you toward
        related people, you browse and communicate with them

    People can have various roles
        performer
        composer
        technician
        teacher

    Audio "signatures"

    Also allow for ensembles

    Search mechanisms
        audio signatures

    Social mechanisms
        private messages
        public message boards
        "follow"

    Notifications
        old search has new results
        you get a new message
        someone follows you
        someone you follow modifies profiles

Could add Music Match to IMSLP
    would enhance music discovery capabilities:
        find composers, see their music

    creates lots of new possibilities because
    we can now have work- and recording-level info

------------------

What should I work on?

What is different in new web site?

What is "new backend"?

API? specification?

-----
social:
integrated w/ IMSLP site
start w/ teachers
user base: non-pro

can be hard to get people to use new features

join design discussions?
Thu 5:45 my time; 30 min
    guy does UI design; not musician
    Ben Chan
    accudotdesign?

TODO:
replicate existing APIs
    web.list.*

================
6 Feb 2023

show code for API
show resulting queries
discrepancy: published year

questions:
what are "categories"?
how is API currently implemented?
does it use a DB?  How populated?
Where does "difficulty" come from?
    RCM ADRSM: grading system

usage case:
    click violin
    show all other categories;
        for each, show only existing values
    current: Rust table scan

goals:
1) searching
2) showing pages

new backend
    weblogs/internal/lib/imslppagefinder
    lib.rs

Rust: C with memory safety
    Rust/PHP bridge

get Rust running?
    get module built
    generate files from DB

get new back end running on my server?? no
============
hard case:

have:
    piano
    concerto, sonata

what composers have works w/that combo of filter

see all time periods
    or composer nationalities
    or composer gender
    or pub date

max # of instrs 

score level:
    all pages with parts for violin 1
    arranged by person X
    have license X
----------
2/20/23
add instrument combos to work/score?

category = MW way of categorizing stuff

e.g. symphonies, beethoven

nail down pub dates
    use comp if not def

2/27/23

What I did:
finish API

- binary files:
    work, score, recording
    instrument combos (11K)
    there are generated by
        a PHP program that gets info from DB and writes text file,
        then a C++ program that reads text file and writes binary

- instrument spec:
    list of (instr, min, max)
    others ok?

    can quickly scan list of combos,
    make a bitmap of those satisfying spec
    can quickly check whether the ICs of a work/score/rec overlap this

- add offset, limit

- API
    PHP program parses JSON args and makes cmdline
    C++ program scans table, prints list of IDs
    PHP program returns these (perhaps as JSON)

    test script: print them as web page, show performance

Add work.year_pub to DB
    integer version of pub year, or comp year
    use this in API filters

What else do we need?
    calls to return info on particular works?
    return this as part of main call?

Next:
    clean up data; publishers

    API to get all info about a work as JSON
        what's shown on IMSLP

3/13/23
    I didn't start on cleaning up publishers.
    We need to discuss how to do this.

    work details API: review

    So far I've:

    - defined DB schema
    - written PHP DB API
    - written PHP scripts for populating DB based on MW files
    - made a PHP web site based on DB schema
        (for debugging, but usable as is)
        search capabilities
    - make "audio sample" mechanism w/ mouse-over audio
    - wrote code for MW expansion w/ templates
    - wrote C++-based fast search API
        "instrumentation specification" concept

    I haven't gotten much feedback on any of this.
    I can't tell if anyone has even looked closely at it.

    My long-term goal is to add social features to IMSLP,
    and to add features for music discovery
    (especially new music) based on social mechanisms.

    I'm committed to finishing IMSLP/DB.
    For me to continue beyond that, I need:
    - an indication that you buy into that vision
    - an assurance that I'll have a major role in planning and design
